{"version":3,"file":"main.js","mappings":";;;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;;;;;;;;;;;ACdb;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,iBAAiB,GAAG,4BAA4B,GAAG,iBAAiB;AAC1F,mBAAmB,mBAAO,CAAC,0BAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA,8CAA8C,aAAa;AAC3D,mCAAmC,4BAA4B;AAC/D;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C,gBAAgB,gBAAgB;AAChC,kCAAkC,oCAAoC;AACtE;AACA;AACA;AACA;AACA,oBAAoB,6BAA6B;AACjD,oBAAoB,gBAAgB;AACpC,sCAAsC,qCAAqC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;;;;;;;;;;;AC/GN;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,eAAe,mBAAO,CAAC,yEAAU;AACjC,8CAA6C,EAAE,qCAAqC,+BAA+B,EAAC;;;;;;;;;;;;ACJvG;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA,cAAc,eAAe,GAAG,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,cAAc,GAAG;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;;;;;;;;;;;ACpHF;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB,GAAG,6BAA6B;AAClD,iBAAiB,mBAAO,CAAC,sBAAQ;AACjC,2CAA2C,mBAAO,CAAC,6FAAoB;AACvE,qBAAqB,mBAAO,CAAC,2FAAsB;AACnD,mBAAmB,mBAAO,CAAC,0BAAU;AACrC,+BAA+B,mBAAO,CAAC,+GAAgC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,MAAM;AAC5D;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA,SAAS;AACT;AACA,gDAAgD,wBAAwB;AACxE;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,MAAM;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,oBAAoB;AACxF;AACA;AACA;AACA;AACA,qDAAqD,UAAU;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,+HAA+H,0BAA0B;AACzJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,YAAY,KAAK,KAAK;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,kDAAkD,WAAW;AAC7D;AACA;AACA;AACA,2DAA2D,WAAW;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,qDAAqD,WAAW;AAChE;AACA;AACA;AACA,8DAA8D,WAAW;AACzE;AACA;AACA,0CAA0C,mBAAO,CAAC,0BAAU;AAC5D;AACA;AACA;AACA,KAAK;AACL;AACA,oDAAoD,WAAW;AAC/D;AACA;AACA;AACA,6DAA6D,WAAW;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,8EAA8E,GAAG;AACjF;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2EAA2E,GAAG;AAC9E;AACA;AACA;AACA;AACA;AACA,qEAAqE,yBAAyB,qEAAqE,cAAc,sBAAsB,YAAY;AACnN;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,sDAAsD,OAAO,6BAA6B,GAAG;AAC7F;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iDAAiD,OAAO,6BAA6B,GAAG;AACxF;AACA;AACA;AACA;AACA;AACA,mEAAmE,OAAO,mEAAmE,cAAc,sBAAsB,YAAY;AAC7L;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,kDAAkD,KAAK,6BAA6B,GAAG;AACvF;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,kDAAkD,KAAK,6BAA6B,GAAG;AACvF;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,kBAAkB;;;;;;;;;;;ACrelB,sHAA4C;;;;;;;;;;;;ACA5C;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNA,IAAMA,GAAG,GAAGC,mBAAO,CAAC,gBAAD,CAAnB;;AACA,IAAMC,IAAI,GAAGD,mBAAO,CAAC,kBAAD,CAApB;;AACA;;AACAA,4GAAA;;AAEA,IAAIK,MAAJ;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBD,EAAAA,MAAM,GAAG,IAAIF,mDAAJ,CAAkB;AACzBI,IAAAA,IAAI,EAAE,KADmB;AAEzB;AACAC,IAAAA,KAAK,EAAE,KAHkB;AAIzBC,IAAAA,cAAc,EAAE;AACdC,MAAAA,eAAe,EAAE,IADH;AAEdC,MAAAA,gBAAgB,EAAE,KAFJ;AAGdC,MAAAA,kBAAkB,EAAE;AAHN;AAJS,GAAlB,CAAT,CADyB,CAYzB;;AACAP,EAAAA,MAAM,CAACQ,OAAP,CACEd,GAAG,CAACe,MAAJ,CAAW;AACTC,IAAAA,QAAQ,EAAEd,IAAI,CAACe,IAAL,CAAUC,SAAV,EAAqB,YAArB,CADD;AAETC,IAAAA,QAAQ,EAAE,OAFD;AAGTC,IAAAA,OAAO,EAAE;AAHA,GAAX,CADF;AAQAd,EAAAA,MAAM,CAACe,EAAP,CAAU,QAAV,EAAoB,YAAM;AACxBf,IAAAA,MAAM,GAAG,IAAT;AACD,GAFD;AAIAA,EAAAA,MAAM,CAACgB,QAAP;AACAhB,EAAAA,MAAM,CAACE,IAAP;AACD,CA3BD;;AA6BAL,4CAAA,CAAO,OAAP,EAAgBI,YAAhB;AAEAJ,4CAAA,CAAO,mBAAP,EAA4B,YAAM;AAChC,MAAIoB,OAAO,CAACC,QAAR,KAAqB,QAAzB,EAAmC;AACjCrB,IAAAA,8CAAA;AACD;AACF,CAJD;AAMAA,4CAAA,CAAO,UAAP,EAAmB,YAAM;AACvB,MAAIG,MAAM,KAAK,IAAf,EAAqB;AACnBC,IAAAA,YAAY;AACb;AACF,CAJD,E","sources":["webpack://assignment-problem-frontend/./node_modules/@electron/remote/dist/src/common/get-electron-binding.js","webpack://assignment-problem-frontend/./node_modules/@electron/remote/dist/src/common/type-utils.js","webpack://assignment-problem-frontend/./node_modules/@electron/remote/dist/src/main/index.js","webpack://assignment-problem-frontend/./node_modules/@electron/remote/dist/src/main/objects-registry.js","webpack://assignment-problem-frontend/./node_modules/@electron/remote/dist/src/main/server.js","webpack://assignment-problem-frontend/./node_modules/@electron/remote/main/index.js","webpack://assignment-problem-frontend/external \"electron\"","webpack://assignment-problem-frontend/external \"events\"","webpack://assignment-problem-frontend/external \"path\"","webpack://assignment-problem-frontend/external \"url\"","webpack://assignment-problem-frontend/webpack/bootstrap","webpack://assignment-problem-frontend/webpack/runtime/compat get default export","webpack://assignment-problem-frontend/webpack/runtime/define property getters","webpack://assignment-problem-frontend/webpack/runtime/hasOwnProperty shorthand","webpack://assignment-problem-frontend/webpack/runtime/make namespace object","webpack://assignment-problem-frontend/./src/main.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getElectronBinding = void 0;\nconst getElectronBinding = (name) => {\n    if (process._linkedBinding) {\n        return process._linkedBinding('electron_common_' + name);\n    }\n    else if (process.electronBinding) {\n        return process.electronBinding(name);\n    }\n    else {\n        return null;\n    }\n};\nexports.getElectronBinding = getElectronBinding;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserialize = exports.serialize = exports.isSerializableObject = exports.isPromise = void 0;\nconst electron_1 = require(\"electron\");\nfunction isPromise(val) {\n    return (val &&\n        val.then &&\n        val.then instanceof Function &&\n        val.constructor &&\n        val.constructor.reject &&\n        val.constructor.reject instanceof Function &&\n        val.constructor.resolve &&\n        val.constructor.resolve instanceof Function);\n}\nexports.isPromise = isPromise;\nconst serializableTypes = [\n    Boolean,\n    Number,\n    String,\n    Date,\n    Error,\n    RegExp,\n    ArrayBuffer\n];\n// https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#Supported_types\nfunction isSerializableObject(value) {\n    return value === null || ArrayBuffer.isView(value) || serializableTypes.some(type => value instanceof type);\n}\nexports.isSerializableObject = isSerializableObject;\nconst objectMap = function (source, mapper) {\n    const sourceEntries = Object.entries(source);\n    const targetEntries = sourceEntries.map(([key, val]) => [key, mapper(val)]);\n    return Object.fromEntries(targetEntries);\n};\nfunction serializeNativeImage(image) {\n    const representations = [];\n    const scaleFactors = image.getScaleFactors();\n    // Use Buffer when there's only one representation for better perf.\n    // This avoids compressing to/from PNG where it's not necessary to\n    // ensure uniqueness of dataURLs (since there's only one).\n    if (scaleFactors.length === 1) {\n        const scaleFactor = scaleFactors[0];\n        const size = image.getSize(scaleFactor);\n        const buffer = image.toBitmap({ scaleFactor });\n        representations.push({ scaleFactor, size, buffer });\n    }\n    else {\n        // Construct from dataURLs to ensure that they are not lost in creation.\n        for (const scaleFactor of scaleFactors) {\n            const size = image.getSize(scaleFactor);\n            const dataURL = image.toDataURL({ scaleFactor });\n            representations.push({ scaleFactor, size, dataURL });\n        }\n    }\n    return { __ELECTRON_SERIALIZED_NativeImage__: true, representations };\n}\nfunction deserializeNativeImage(value) {\n    const image = electron_1.nativeImage.createEmpty();\n    // Use Buffer when there's only one representation for better perf.\n    // This avoids compressing to/from PNG where it's not necessary to\n    // ensure uniqueness of dataURLs (since there's only one).\n    if (value.representations.length === 1) {\n        const { buffer, size, scaleFactor } = value.representations[0];\n        const { width, height } = size;\n        image.addRepresentation({ buffer, scaleFactor, width, height });\n    }\n    else {\n        // Construct from dataURLs to ensure that they are not lost in creation.\n        for (const rep of value.representations) {\n            const { dataURL, size, scaleFactor } = rep;\n            const { width, height } = size;\n            image.addRepresentation({ dataURL, scaleFactor, width, height });\n        }\n    }\n    return image;\n}\nfunction serialize(value) {\n    if (value && value.constructor && value.constructor.name === 'NativeImage') {\n        return serializeNativeImage(value);\n    }\n    if (Array.isArray(value)) {\n        return value.map(serialize);\n    }\n    else if (isSerializableObject(value)) {\n        return value;\n    }\n    else if (value instanceof Object) {\n        return objectMap(value, serialize);\n    }\n    else {\n        return value;\n    }\n}\nexports.serialize = serialize;\nfunction deserialize(value) {\n    if (value && value.__ELECTRON_SERIALIZED_NativeImage__) {\n        return deserializeNativeImage(value);\n    }\n    else if (Array.isArray(value)) {\n        return value.map(deserialize);\n    }\n    else if (isSerializableObject(value)) {\n        return value;\n    }\n    else if (value instanceof Object) {\n        return objectMap(value, deserialize);\n    }\n    else {\n        return value;\n    }\n}\nexports.deserialize = deserialize;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initialize = void 0;\nvar server_1 = require(\"./server\");\nObject.defineProperty(exports, \"initialize\", { enumerable: true, get: function () { return server_1.initialize; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst getOwnerKey = (webContents, contextId) => {\n    return `${webContents.id}-${contextId}`;\n};\nclass ObjectsRegistry {\n    constructor() {\n        this.nextId = 0;\n        // Stores all objects by ref-counting.\n        // (id) => {object, count}\n        this.storage = {};\n        // Stores the IDs + refCounts of objects referenced by WebContents.\n        // (ownerKey) => { id: refCount }\n        this.owners = {};\n        this.electronIds = new WeakMap();\n    }\n    // Register a new object and return its assigned ID. If the object is already\n    // registered then the already assigned ID would be returned.\n    add(webContents, contextId, obj) {\n        // Get or assign an ID to the object.\n        const id = this.saveToStorage(obj);\n        // Add object to the set of referenced objects.\n        const ownerKey = getOwnerKey(webContents, contextId);\n        let owner = this.owners[ownerKey];\n        if (!owner) {\n            owner = this.owners[ownerKey] = new Map();\n            this.registerDeleteListener(webContents, contextId);\n        }\n        if (!owner.has(id)) {\n            owner.set(id, 0);\n            // Increase reference count if not referenced before.\n            this.storage[id].count++;\n        }\n        owner.set(id, owner.get(id) + 1);\n        return id;\n    }\n    // Get an object according to its ID.\n    get(id) {\n        const pointer = this.storage[id];\n        if (pointer != null)\n            return pointer.object;\n    }\n    // Dereference an object according to its ID.\n    // Note that an object may be double-freed (cleared when page is reloaded, and\n    // then garbage collected in old page).\n    remove(webContents, contextId, id) {\n        const ownerKey = getOwnerKey(webContents, contextId);\n        const owner = this.owners[ownerKey];\n        if (owner && owner.has(id)) {\n            const newRefCount = owner.get(id) - 1;\n            // Only completely remove if the number of references GCed in the\n            // renderer is the same as the number of references we sent them\n            if (newRefCount <= 0) {\n                // Remove the reference in owner.\n                owner.delete(id);\n                // Dereference from the storage.\n                this.dereference(id);\n            }\n            else {\n                owner.set(id, newRefCount);\n            }\n        }\n    }\n    // Clear all references to objects refrenced by the WebContents.\n    clear(webContents, contextId) {\n        const ownerKey = getOwnerKey(webContents, contextId);\n        const owner = this.owners[ownerKey];\n        if (!owner)\n            return;\n        for (const id of owner.keys())\n            this.dereference(id);\n        delete this.owners[ownerKey];\n    }\n    // Saves the object into storage and assigns an ID for it.\n    saveToStorage(object) {\n        let id = this.electronIds.get(object);\n        if (!id) {\n            id = ++this.nextId;\n            this.storage[id] = {\n                count: 0,\n                object: object\n            };\n            this.electronIds.set(object, id);\n        }\n        return id;\n    }\n    // Dereference the object from store.\n    dereference(id) {\n        const pointer = this.storage[id];\n        if (pointer == null) {\n            return;\n        }\n        pointer.count -= 1;\n        if (pointer.count === 0) {\n            this.electronIds.delete(pointer.object);\n            delete this.storage[id];\n        }\n    }\n    // Clear the storage when renderer process is destroyed.\n    registerDeleteListener(webContents, contextId) {\n        // contextId => ${processHostId}-${contextCount}\n        const processHostId = contextId.split('-')[0];\n        const listener = (_, deletedProcessHostId) => {\n            if (deletedProcessHostId &&\n                deletedProcessHostId.toString() === processHostId) {\n                webContents.removeListener('render-view-deleted', listener);\n                this.clear(webContents, contextId);\n            }\n        };\n        // Note that the \"render-view-deleted\" event may not be emitted on time when\n        // the renderer process get destroyed because of navigation, we rely on the\n        // renderer process to send \"ELECTRON_BROWSER_CONTEXT_RELEASE\" message to\n        // guard this situation.\n        webContents.on('render-view-deleted', listener);\n    }\n}\nexports.default = new ObjectsRegistry();\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initialize = exports.isRemoteModuleEnabled = void 0;\nconst events_1 = require(\"events\");\nconst objects_registry_1 = __importDefault(require(\"./objects-registry\"));\nconst type_utils_1 = require(\"../common/type-utils\");\nconst electron_1 = require(\"electron\");\nconst get_electron_binding_1 = require(\"../common/get-electron-binding\");\nconst v8Util = get_electron_binding_1.getElectronBinding('v8_util');\n// The internal properties of Function.\nconst FUNCTION_PROPERTIES = [\n    'length', 'name', 'arguments', 'caller', 'prototype'\n];\n// The remote functions in renderer processes.\nconst rendererFunctionCache = new Map();\n// eslint-disable-next-line no-undef\nconst finalizationRegistry = new FinalizationRegistry((fi) => {\n    const mapKey = fi.id[0] + '~' + fi.id[1];\n    const ref = rendererFunctionCache.get(mapKey);\n    if (ref !== undefined && ref.deref() === undefined) {\n        rendererFunctionCache.delete(mapKey);\n        if (!fi.webContents.isDestroyed()) {\n            try {\n                fi.webContents.sendToFrame(fi.frameId, \"REMOTE_RENDERER_RELEASE_CALLBACK\" /* RENDERER_RELEASE_CALLBACK */, fi.id[0], fi.id[1]);\n            }\n            catch (error) {\n                console.warn(`sendToFrame() failed: ${error}`);\n            }\n        }\n    }\n});\nfunction getCachedRendererFunction(id) {\n    const mapKey = id[0] + '~' + id[1];\n    const ref = rendererFunctionCache.get(mapKey);\n    if (ref !== undefined) {\n        const deref = ref.deref();\n        if (deref !== undefined)\n            return deref;\n    }\n}\nfunction setCachedRendererFunction(id, wc, frameId, value) {\n    // eslint-disable-next-line no-undef\n    const wr = new WeakRef(value);\n    const mapKey = id[0] + '~' + id[1];\n    rendererFunctionCache.set(mapKey, wr);\n    finalizationRegistry.register(value, {\n        id,\n        webContents: wc,\n        frameId\n    });\n    return value;\n}\nconst locationInfo = new WeakMap();\n// Return the description of object's members:\nconst getObjectMembers = function (object) {\n    let names = Object.getOwnPropertyNames(object);\n    // For Function, we should not override following properties even though they\n    // are \"own\" properties.\n    if (typeof object === 'function') {\n        names = names.filter((name) => {\n            return !FUNCTION_PROPERTIES.includes(name);\n        });\n    }\n    // Map properties to descriptors.\n    return names.map((name) => {\n        const descriptor = Object.getOwnPropertyDescriptor(object, name);\n        let type;\n        let writable = false;\n        if (descriptor.get === undefined && typeof object[name] === 'function') {\n            type = 'method';\n        }\n        else {\n            if (descriptor.set || descriptor.writable)\n                writable = true;\n            type = 'get';\n        }\n        return { name, enumerable: descriptor.enumerable, writable, type };\n    });\n};\n// Return the description of object's prototype.\nconst getObjectPrototype = function (object) {\n    const proto = Object.getPrototypeOf(object);\n    if (proto === null || proto === Object.prototype)\n        return null;\n    return {\n        members: getObjectMembers(proto),\n        proto: getObjectPrototype(proto)\n    };\n};\n// Convert a real value into meta data.\nconst valueToMeta = function (sender, contextId, value, optimizeSimpleObject = false) {\n    // Determine the type of value.\n    let type;\n    switch (typeof value) {\n        case 'object':\n            // Recognize certain types of objects.\n            if (value instanceof Buffer) {\n                type = 'buffer';\n            }\n            else if (value && value.constructor && value.constructor.name === 'NativeImage') {\n                type = 'nativeimage';\n            }\n            else if (Array.isArray(value)) {\n                type = 'array';\n            }\n            else if (value instanceof Error) {\n                type = 'error';\n            }\n            else if (type_utils_1.isSerializableObject(value)) {\n                type = 'value';\n            }\n            else if (type_utils_1.isPromise(value)) {\n                type = 'promise';\n            }\n            else if (Object.prototype.hasOwnProperty.call(value, 'callee') && value.length != null) {\n                // Treat the arguments object as array.\n                type = 'array';\n            }\n            else if (optimizeSimpleObject && v8Util.getHiddenValue(value, 'simple')) {\n                // Treat simple objects as value.\n                type = 'value';\n            }\n            else {\n                type = 'object';\n            }\n            break;\n        case 'function':\n            type = 'function';\n            break;\n        default:\n            type = 'value';\n            break;\n    }\n    // Fill the meta object according to value's type.\n    if (type === 'array') {\n        return {\n            type,\n            members: value.map((el) => valueToMeta(sender, contextId, el, optimizeSimpleObject))\n        };\n    }\n    else if (type === 'nativeimage') {\n        return { type, value: type_utils_1.serialize(value) };\n    }\n    else if (type === 'object' || type === 'function') {\n        return {\n            type,\n            name: value.constructor ? value.constructor.name : '',\n            // Reference the original value if it's an object, because when it's\n            // passed to renderer we would assume the renderer keeps a reference of\n            // it.\n            id: objects_registry_1.default.add(sender, contextId, value),\n            members: getObjectMembers(value),\n            proto: getObjectPrototype(value)\n        };\n    }\n    else if (type === 'buffer') {\n        return { type, value };\n    }\n    else if (type === 'promise') {\n        // Add default handler to prevent unhandled rejections in main process\n        // Instead they should appear in the renderer process\n        value.then(function () { }, function () { });\n        return {\n            type,\n            then: valueToMeta(sender, contextId, function (onFulfilled, onRejected) {\n                value.then(onFulfilled, onRejected);\n            })\n        };\n    }\n    else if (type === 'error') {\n        return {\n            type,\n            value,\n            members: Object.keys(value).map(name => ({\n                name,\n                value: valueToMeta(sender, contextId, value[name])\n            }))\n        };\n    }\n    else {\n        return {\n            type: 'value',\n            value\n        };\n    }\n};\nconst throwRPCError = function (message) {\n    const error = new Error(message);\n    error.code = 'EBADRPC';\n    error.errno = -72;\n    throw error;\n};\nconst removeRemoteListenersAndLogWarning = (sender, callIntoRenderer) => {\n    const location = locationInfo.get(callIntoRenderer);\n    let message = 'Attempting to call a function in a renderer window that has been closed or released.' +\n        `\\nFunction provided here: ${location}`;\n    if (sender instanceof events_1.EventEmitter) {\n        const remoteEvents = sender.eventNames().filter((eventName) => {\n            return sender.listeners(eventName).includes(callIntoRenderer);\n        });\n        if (remoteEvents.length > 0) {\n            message += `\\nRemote event names: ${remoteEvents.join(', ')}`;\n            remoteEvents.forEach((eventName) => {\n                sender.removeListener(eventName, callIntoRenderer);\n            });\n        }\n    }\n    console.warn(message);\n};\nconst fakeConstructor = (constructor, name) => new Proxy(Object, {\n    get(target, prop, receiver) {\n        if (prop === 'name') {\n            return name;\n        }\n        else {\n            return Reflect.get(target, prop, receiver);\n        }\n    }\n});\n// Convert array of meta data from renderer into array of real values.\nconst unwrapArgs = function (sender, frameId, contextId, args) {\n    const metaToValue = function (meta) {\n        switch (meta.type) {\n            case 'nativeimage':\n                return type_utils_1.deserialize(meta.value);\n            case 'value':\n                return meta.value;\n            case 'remote-object':\n                return objects_registry_1.default.get(meta.id);\n            case 'array':\n                return unwrapArgs(sender, frameId, contextId, meta.value);\n            case 'buffer':\n                return Buffer.from(meta.value.buffer, meta.value.byteOffset, meta.value.byteLength);\n            case 'promise':\n                return Promise.resolve({\n                    then: metaToValue(meta.then)\n                });\n            case 'object': {\n                const ret = meta.name !== 'Object' ? Object.create({\n                    constructor: fakeConstructor(Object, meta.name)\n                }) : {};\n                for (const { name, value } of meta.members) {\n                    ret[name] = metaToValue(value);\n                }\n                return ret;\n            }\n            case 'function-with-return-value': {\n                const returnValue = metaToValue(meta.value);\n                return function () {\n                    return returnValue;\n                };\n            }\n            case 'function': {\n                // Merge contextId and meta.id, since meta.id can be the same in\n                // different webContents.\n                const objectId = [contextId, meta.id];\n                // Cache the callbacks in renderer.\n                const cachedFunction = getCachedRendererFunction(objectId);\n                if (cachedFunction !== undefined) {\n                    return cachedFunction;\n                }\n                const callIntoRenderer = function (...args) {\n                    let succeed = false;\n                    if (!sender.isDestroyed()) {\n                        try {\n                            succeed = sender.sendToFrame(frameId, \"REMOTE_RENDERER_CALLBACK\" /* RENDERER_CALLBACK */, contextId, meta.id, valueToMeta(sender, contextId, args)) !== false;\n                        }\n                        catch (error) {\n                            console.warn(`sendToFrame() failed: ${error}`);\n                        }\n                    }\n                    if (!succeed) {\n                        removeRemoteListenersAndLogWarning(this, callIntoRenderer);\n                    }\n                };\n                locationInfo.set(callIntoRenderer, meta.location);\n                Object.defineProperty(callIntoRenderer, 'length', { value: meta.length });\n                setCachedRendererFunction(objectId, sender, frameId, callIntoRenderer);\n                return callIntoRenderer;\n            }\n            default:\n                throw new TypeError(`Unknown type: ${meta.type}`);\n        }\n    };\n    return args.map(metaToValue);\n};\nconst isRemoteModuleEnabledImpl = function (contents) {\n    const webPreferences = contents.getLastWebPreferences() || {};\n    return webPreferences.enableRemoteModule != null ? !!webPreferences.enableRemoteModule : false;\n};\nconst isRemoteModuleEnabledCache = new WeakMap();\nconst isRemoteModuleEnabled = function (contents) {\n    if (!isRemoteModuleEnabledCache.has(contents)) {\n        isRemoteModuleEnabledCache.set(contents, isRemoteModuleEnabledImpl(contents));\n    }\n    return isRemoteModuleEnabledCache.get(contents);\n};\nexports.isRemoteModuleEnabled = isRemoteModuleEnabled;\nconst handleRemoteCommand = function (channel, handler) {\n    electron_1.ipcMain.on(channel, (event, contextId, ...args) => {\n        let returnValue;\n        if (!exports.isRemoteModuleEnabled(event.sender)) {\n            event.returnValue = {\n                type: 'exception',\n                value: valueToMeta(event.sender, contextId, new Error('@electron/remote is disabled for this WebContents. Set {enableRemoteModule: true} in WebPreferences to enable it.'))\n            };\n            return;\n        }\n        try {\n            returnValue = handler(event, contextId, ...args);\n        }\n        catch (error) {\n            returnValue = {\n                type: 'exception',\n                value: valueToMeta(event.sender, contextId, error),\n            };\n        }\n        if (returnValue !== undefined) {\n            event.returnValue = returnValue;\n        }\n    });\n};\nconst emitCustomEvent = function (contents, eventName, ...args) {\n    const event = { sender: contents, returnValue: undefined, defaultPrevented: false };\n    electron_1.app.emit(eventName, event, contents, ...args);\n    contents.emit(eventName, event, ...args);\n    return event;\n};\nconst logStack = function (contents, code, stack) {\n    if (stack) {\n        console.warn(`WebContents (${contents.id}): ${code}`, stack);\n    }\n};\nlet initialized = false;\nfunction initialize() {\n    if (initialized)\n        throw new Error('electron-remote has already been initialized');\n    initialized = true;\n    handleRemoteCommand(\"REMOTE_BROWSER_WRONG_CONTEXT_ERROR\" /* BROWSER_WRONG_CONTEXT_ERROR */, function (event, contextId, passedContextId, id) {\n        const objectId = [passedContextId, id];\n        const cachedFunction = getCachedRendererFunction(objectId);\n        if (cachedFunction === undefined) {\n            // Do nothing if the error has already been reported before.\n            return;\n        }\n        removeRemoteListenersAndLogWarning(event.sender, cachedFunction);\n    });\n    handleRemoteCommand(\"REMOTE_BROWSER_REQUIRE\" /* BROWSER_REQUIRE */, function (event, contextId, moduleName, stack) {\n        logStack(event.sender, `remote.require('${moduleName}')`, stack);\n        const customEvent = emitCustomEvent(event.sender, 'remote-require', moduleName);\n        if (customEvent.returnValue === undefined) {\n            if (customEvent.defaultPrevented) {\n                throw new Error(`Blocked remote.require('${moduleName}')`);\n            }\n            else {\n                customEvent.returnValue = process.mainModule.require(moduleName);\n            }\n        }\n        return valueToMeta(event.sender, contextId, customEvent.returnValue);\n    });\n    handleRemoteCommand(\"REMOTE_BROWSER_GET_BUILTIN\" /* BROWSER_GET_BUILTIN */, function (event, contextId, moduleName, stack) {\n        logStack(event.sender, `remote.getBuiltin('${moduleName}')`, stack);\n        const customEvent = emitCustomEvent(event.sender, 'remote-get-builtin', moduleName);\n        if (customEvent.returnValue === undefined) {\n            if (customEvent.defaultPrevented) {\n                throw new Error(`Blocked remote.getBuiltin('${moduleName}')`);\n            }\n            else {\n                customEvent.returnValue = require('electron')[moduleName];\n            }\n        }\n        return valueToMeta(event.sender, contextId, customEvent.returnValue);\n    });\n    handleRemoteCommand(\"REMOTE_BROWSER_GET_GLOBAL\" /* BROWSER_GET_GLOBAL */, function (event, contextId, globalName, stack) {\n        logStack(event.sender, `remote.getGlobal('${globalName}')`, stack);\n        const customEvent = emitCustomEvent(event.sender, 'remote-get-global', globalName);\n        if (customEvent.returnValue === undefined) {\n            if (customEvent.defaultPrevented) {\n                throw new Error(`Blocked remote.getGlobal('${globalName}')`);\n            }\n            else {\n                customEvent.returnValue = global[globalName];\n            }\n        }\n        return valueToMeta(event.sender, contextId, customEvent.returnValue);\n    });\n    handleRemoteCommand(\"REMOTE_BROWSER_GET_CURRENT_WINDOW\" /* BROWSER_GET_CURRENT_WINDOW */, function (event, contextId, stack) {\n        logStack(event.sender, 'remote.getCurrentWindow()', stack);\n        const customEvent = emitCustomEvent(event.sender, 'remote-get-current-window');\n        if (customEvent.returnValue === undefined) {\n            if (customEvent.defaultPrevented) {\n                throw new Error('Blocked remote.getCurrentWindow()');\n            }\n            else {\n                customEvent.returnValue = event.sender.getOwnerBrowserWindow();\n            }\n        }\n        return valueToMeta(event.sender, contextId, customEvent.returnValue);\n    });\n    handleRemoteCommand(\"REMOTE_BROWSER_GET_CURRENT_WEB_CONTENTS\" /* BROWSER_GET_CURRENT_WEB_CONTENTS */, function (event, contextId, stack) {\n        logStack(event.sender, 'remote.getCurrentWebContents()', stack);\n        const customEvent = emitCustomEvent(event.sender, 'remote-get-current-web-contents');\n        if (customEvent.returnValue === undefined) {\n            if (customEvent.defaultPrevented) {\n                throw new Error('Blocked remote.getCurrentWebContents()');\n            }\n            else {\n                customEvent.returnValue = event.sender;\n            }\n        }\n        return valueToMeta(event.sender, contextId, customEvent.returnValue);\n    });\n    handleRemoteCommand(\"REMOTE_BROWSER_CONSTRUCTOR\" /* BROWSER_CONSTRUCTOR */, function (event, contextId, id, args) {\n        args = unwrapArgs(event.sender, event.frameId, contextId, args);\n        const constructor = objects_registry_1.default.get(id);\n        if (constructor == null) {\n            throwRPCError(`Cannot call constructor on missing remote object ${id}`);\n        }\n        return valueToMeta(event.sender, contextId, new constructor(...args));\n    });\n    handleRemoteCommand(\"REMOTE_BROWSER_FUNCTION_CALL\" /* BROWSER_FUNCTION_CALL */, function (event, contextId, id, args) {\n        args = unwrapArgs(event.sender, event.frameId, contextId, args);\n        const func = objects_registry_1.default.get(id);\n        if (func == null) {\n            throwRPCError(`Cannot call function on missing remote object ${id}`);\n        }\n        try {\n            return valueToMeta(event.sender, contextId, func(...args), true);\n        }\n        catch (error) {\n            const err = new Error(`Could not call remote function '${func.name || 'anonymous'}'. Check that the function signature is correct. Underlying error: ${error.message}\\nUnderlying stack: ${error.stack}\\n`);\n            err.cause = error;\n            throw err;\n        }\n    });\n    handleRemoteCommand(\"REMOTE_BROWSER_MEMBER_CONSTRUCTOR\" /* BROWSER_MEMBER_CONSTRUCTOR */, function (event, contextId, id, method, args) {\n        args = unwrapArgs(event.sender, event.frameId, contextId, args);\n        const object = objects_registry_1.default.get(id);\n        if (object == null) {\n            throwRPCError(`Cannot call constructor '${method}' on missing remote object ${id}`);\n        }\n        return valueToMeta(event.sender, contextId, new object[method](...args));\n    });\n    handleRemoteCommand(\"REMOTE_BROWSER_MEMBER_CALL\" /* BROWSER_MEMBER_CALL */, function (event, contextId, id, method, args) {\n        args = unwrapArgs(event.sender, event.frameId, contextId, args);\n        const object = objects_registry_1.default.get(id);\n        if (object == null) {\n            throwRPCError(`Cannot call method '${method}' on missing remote object ${id}`);\n        }\n        try {\n            return valueToMeta(event.sender, contextId, object[method](...args), true);\n        }\n        catch (error) {\n            const err = new Error(`Could not call remote method '${method}'. Check that the method signature is correct. Underlying error: ${error.message}\\nUnderlying stack: ${error.stack}\\n`);\n            err.cause = error;\n            throw err;\n        }\n    });\n    handleRemoteCommand(\"REMOTE_BROWSER_MEMBER_SET\" /* BROWSER_MEMBER_SET */, function (event, contextId, id, name, args) {\n        args = unwrapArgs(event.sender, event.frameId, contextId, args);\n        const obj = objects_registry_1.default.get(id);\n        if (obj == null) {\n            throwRPCError(`Cannot set property '${name}' on missing remote object ${id}`);\n        }\n        obj[name] = args[0];\n        return null;\n    });\n    handleRemoteCommand(\"REMOTE_BROWSER_MEMBER_GET\" /* BROWSER_MEMBER_GET */, function (event, contextId, id, name) {\n        const obj = objects_registry_1.default.get(id);\n        if (obj == null) {\n            throwRPCError(`Cannot get property '${name}' on missing remote object ${id}`);\n        }\n        return valueToMeta(event.sender, contextId, obj[name]);\n    });\n    handleRemoteCommand(\"REMOTE_BROWSER_DEREFERENCE\" /* BROWSER_DEREFERENCE */, function (event, contextId, id) {\n        objects_registry_1.default.remove(event.sender, contextId, id);\n    });\n    handleRemoteCommand(\"REMOTE_BROWSER_CONTEXT_RELEASE\" /* BROWSER_CONTEXT_RELEASE */, (event, contextId) => {\n        objects_registry_1.default.clear(event.sender, contextId);\n        return null;\n    });\n}\nexports.initialize = initialize;\n","module.exports = require('../dist/src/main')\n","module.exports = require(\"electron\");","module.exports = require(\"events\");","module.exports = require(\"path\");","module.exports = require(\"url\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const url = require(\"url\");\r\nconst path = require(\"path\");\r\nimport { app, BrowserWindow, shell } from \"electron\";\r\nrequire(\"@electron/remote/main\").initialize();\r\n\r\nlet window: BrowserWindow | null;\r\n\r\nconst createWindow = () => {\r\n  window = new BrowserWindow({\r\n    show: false,\r\n    //titleBarStyle: \"hidden\",\r\n    frame: false,\r\n    webPreferences: {\r\n      nodeIntegration: true,\r\n      contextIsolation: false,\r\n      enableRemoteModule: true,\r\n    },\r\n  });\r\n\r\n  // window.setIcon();\r\n  window.loadURL(\r\n    url.format({\r\n      pathname: path.join(__dirname, \"index.html\"),\r\n      protocol: \"file:\",\r\n      slashes: true,\r\n    })\r\n  );\r\n\r\n  window.on(\"closed\", () => {\r\n    window = null;\r\n  });\r\n\r\n  window.maximize();\r\n  window.show();\r\n};\r\n\r\napp.on(\"ready\", createWindow);\r\n\r\napp.on(\"window-all-closed\", () => {\r\n  if (process.platform !== \"darwin\") {\r\n    app.quit();\r\n  }\r\n});\r\n\r\napp.on(\"activate\", () => {\r\n  if (window === null) {\r\n    createWindow();\r\n  }\r\n});\r\n"],"names":["url","require","path","app","BrowserWindow","initialize","window","createWindow","show","frame","webPreferences","nodeIntegration","contextIsolation","enableRemoteModule","loadURL","format","pathname","join","__dirname","protocol","slashes","on","maximize","process","platform","quit"],"sourceRoot":""}